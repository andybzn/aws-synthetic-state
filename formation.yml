AWSTemplateFormatVersion: 2010-09-09
Description: Service Infrastructure to get CloudWatch Synthetic Canary Status

Parameters:
  ServiceName:
    Type: String
    Description: The name to deploy this service as.
    AllowedPattern: "[a-zA-Z0-9_-]*"
    ConstraintDescription: "ServiceName must match the following pattern: [a-zA-Z0-9_-]. Spaces are not permitted."
  S3Bucket:
    Type: String
    Description: The S3 Bucket containing the bootstrap.zip
    AllowedPattern: "[a-z0-9\\.-]*"
    ConstraintDescription: "S3Bucket must match the following pattern: [a-z0-9\\.-]. Spaces are not permitted."
  CanaryName:
    Type: String
    Description: The name of the target canary.
  CanaryRegion:
    Type: String
    Description: The region tag for the target canary.
    Default: eu-west-2
    AllowedValues:
      - af-south-1
      - ap-east-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-south-1
      - ap-south-2
      - ap-southeast-1
      - ap-southeast-2
      - ap-southeast-3
      - ca-central-1
      - eu-central-1
      - eu-central-2
      - eu-north-1
      - eu-south-1
      - eu-south-2
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - me-central-1
      - me-south-1
      - sa-east-1
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2

Resources:
  LambdaFunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-canary-get
      Description: !Sub Return status for the ${CanaryName} synthetic canary
      Runtime: provided.al2
      Handler: index.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: bootstrap.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          canaryName: !Ref CanaryName
          canaryRegion: !Ref CanaryRegion

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: CloudWatchSyntheticsDescribe
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: synthetics:Describe*
                Resource: "*"
        - PolicyName: BasicLambdaExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ServiceName}-canary-get:*

  ApiGatewayApi:
    DependsOn: LambdaFunction
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ServiceName
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayMethod:
    DependsOn: ApiGatewayApi
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResourceId: !GetAtt ApiGatewayApi.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "404"
            SelectionPattern: CanaryFailed*
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "404"

  ApiDeployment:
    DependsOn: ApiGatewayMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayApi
      Description: Deploy service
      StageName: v1

  ApiInvokeLambda:
    DependsOn: ApiGatewayApi
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*/*

Outputs:
  ServiceInvokeUrl:
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/v1
